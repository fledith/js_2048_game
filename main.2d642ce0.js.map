{"version":3,"sources":["scripts/main.js"],"names":["board","rows","columns","score","document","querySelector","cells","querySelectorAll","button","messageWin","messageLose","messageStart","setGame","i","r","c","id","num","updateTile","setRandom","hasEmptyTile","isFound","Math","floor","random","tile","getElementById","innerText","classList","add","value","addEventListener","textContent","remove","handler","e","code","slideLeft","slideRight","slideUp","slideDown","lose","win","filterZero","row","filter","slide","newRow","length","push","reverse"],"mappings":"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","file":"main.2d642ce0.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board;\nconst rows = 4; // in cycle, I will use r like row\nconst columns = 4; // in cycle, I will use c like column\nconst score = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst button = document.querySelector('.button');\n\n// -----messages-----\n\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nbutton.addEventListener('click', () => {\n  if (button.textContent === 'Start') {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n  }\n\n  score.textContent = '0';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  setGame();\n});\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  let i = 0; // i equal index of cells children\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      cells[i].id = `${r}-${c}`;\n\n      const num = board[r][c];\n\n      updateTile(cells[i], num);\n\n      i++;\n    }\n  }\n\n  setRandom();\n  setRandom();\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setRandom() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let isFound = false;\n\n  while (!isFound) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = Math.random() < 0.1 ? 4 : 2;\n\n      const tile = document.getElementById(`${r}-${c}`);\n\n      tile.innerText = '2';\n      tile.classList.add('field-cell--2');\n      isFound = true;\n    }\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n    tile.classList.add(`field-cell--${num}`);\n  }\n}\n\nconst handler = (e) => {\n  switch (e.code) {\n    case 'ArrowLeft': {\n      slideLeft();\n      setRandom();\n\n      break;\n    }\n\n    case 'ArrowRight': {\n      slideRight();\n      setRandom();\n\n      break;\n    }\n\n    case 'ArrowUp': {\n      slideUp();\n      setRandom();\n\n      break;\n    }\n\n    case 'ArrowDown': {\n      slideDown();\n      setRandom();\n\n      break;\n    }\n  }\n\n  lose();\n  win();\n};\n\ndocument.addEventListener('keyup', handler);\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterZero(row); // get rid of zeroes\n\n  // slide\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score.textContent = `${+score.textContent + newRow[i]}`;\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  // add zeroes\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < columns; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < columns; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction lose() {\n  if (hasEmptyTile()) {\n    return;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (board[c][r] === board[c + 1][r] || board[r][c] === board[r][c + 1]) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n}\n\nfunction win() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 2048) {\n        messageWin.classList.remove('hidden');\n      }\n    }\n  }\n}\n"]}